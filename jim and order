#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);
int parse_int(char*);

// Struct to hold customer info
typedef struct {
    int customer_number;
    int serve_time;
} Customer;

// Comparator for sorting
int compare(const void* a, const void* b) {
    Customer* c1 = (Customer*)a;
    Customer* c2 = (Customer*)b;

    if (c1->serve_time == c2->serve_time) {
        return c1->customer_number - c2->customer_number;
    }
    return c1->serve_time - c2->serve_time;
}

// Main logic for Jim's Orders
int* jimOrders(int orders_rows, int orders_columns, int** orders, int* result_count) {
    Customer* customers = malloc(orders_rows * sizeof(Customer));

    for (int i = 0; i < orders_rows; i++) {
        customers[i].customer_number = i + 1;
        customers[i].serve_time = orders[i][0] + orders[i][1];
    }

    qsort(customers, orders_rows, sizeof(Customer), compare);

    int* result = malloc(orders_rows * sizeof(int));
    for (int i = 0; i < orders_rows; i++) {
        result[i] = customers[i].customer_number;
    }

    *result_count = orders_rows;
    free(customers);
    return result;
}

// Main function (usually provided by HackerRank)
int main() {
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int n = parse_int(ltrim(rtrim(readline())));

    int** orders = malloc(n * sizeof(int*));

    for (int i = 0; i < n; i++) {
        *(orders + i) = malloc(2 * (sizeof(int)));

        char** orders_item_temp = split_string(rtrim(readline()));

        for (int j = 0; j < 2; j++) {
            int orders_item = parse_int(*(orders_item_temp + j));
            *(*(orders + i) + j) = orders_item;
        }
    }

    int result_count;
    int* result = jimOrders(n, 2, orders, &result_count);

    for (int i = 0; i < result_count; i++) {
        fprintf(fptr, "%d", *(result + i));
        if (i != result_count - 1) {
            fprintf(fptr, " ");
        }
    }

    fprintf(fptr, "\n");
    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);
        if (!line) break;

        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;

        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) break;
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
        data = realloc(data, data_length);
    } else {
        data = realloc(data, data_length + 1);
        data[data_length] = '\0';
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) return NULL;
    while (isspace(*str)) str++;
    return str;
}

char* rtrim(char* str) {
    if (!str) return NULL;
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) end--;
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }

    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') exit(EXIT_FAILURE);
    return value;
}
